---
import Breadcrumb from '~/components/header/Breadcrumb.astro'
import BreadcrumbItem from '~/components/header/BreadcrumbItem.astro'
import BreadcrumbItemCurrent from '~/components/header/BreadcrumbItemCurrent.astro'
import OrderSummary from '~/components/order/OrderSummary'
import PersonalInformation from '~/components/order/PersonalInformation'
import { createOrder } from '~/components/order/actions'
import Layout from '~/layouts/Layout.astro'
import { defaultOrderSchema, fullOrderSchema } from '~/schemas'
import { prisma } from 'schema'
import { type FlatErrors, flatten, safeParse } from 'valibot'

let errors: FlatErrors = { nested: {} }

const product = await prisma.product.findUniqueOrThrow({
  where: { id: Astro.params.productId as string },
  select: {
    id: true,
    name: true,
    image: true,
    price: true,
    quantity: true,
    remainQuantity: true,
  },
})

if (product.remainQuantity === 0) {
  return Astro.redirect(`/products/${product.id}`)
}

if (Astro.request.method === 'POST') {
  const { productId } = Astro.params

  if (!productId) {
    // TODO: 404 page for not found product
    return
  }

  const formData = await Astro.request.formData()
  const data = Object.fromEntries(formData.entries())

  const parsed = safeParse(
    formData.has('sameAsShipping') ? defaultOrderSchema : fullOrderSchema,
    data,
    { abortPipeEarly: true },
  )

  if (!parsed.success) {
    errors = flatten(parsed.issues)
  } else {
    if (formData.has('sameAsShipping')) {
      const orderId = await createOrder({
        productId,
        email: parsed.output.email,
        quantity: parsed.output.quantity,
        billingAddress: {
          lastName: parsed.output.shippingLastName,
          firstName: parsed.output.shippingFirstName,
          addressLevel1: '',
          phone: parsed.output.shippingPhone,
          postalCode: parsed.output.shippingPostalCode,
          stressAddress: parsed.output.shippingStreetAddress,
          addressLevel4: parsed.output.shippingAddressLevel4,
          addressLevel3: parsed.output.shippingAddressLevel3,
          addressLevel2: parsed.output.shippingAddressLevel2,
        },
        shippingAddress: {
          lastName: parsed.output.shippingLastName,
          firstName: parsed.output.shippingFirstName,
          addressLevel1: '',
          phone: parsed.output.shippingPhone,
          postalCode: parsed.output.shippingPostalCode,
          stressAddress: parsed.output.shippingStreetAddress,
          addressLevel4: parsed.output.shippingAddressLevel4,
          addressLevel3: parsed.output.shippingAddressLevel3,
          addressLevel2: parsed.output.shippingAddressLevel2,
        },
      })

      return Astro.redirect(`/orders/${orderId}`)
    } else {
      const orderId = await createOrder({
        productId,
        email: parsed.output.email,
        quantity: parsed.output.quantity,
        billingAddress: {
          lastName: parsed.output.billingLastName,
          firstName: parsed.output.billingFirstName,
          addressLevel1: '',
          phone: parsed.output.billingPhone,
          postalCode: parsed.output.billingPostalCode,
          stressAddress: parsed.output.billingStreetAddress,
          addressLevel4: parsed.output.billingAddressLevel4,
          addressLevel3: parsed.output.billingAddressLevel3,
          addressLevel2: parsed.output.billingAddressLevel2,
        },
        shippingAddress: {
          lastName: parsed.output.shippingLastName,
          firstName: parsed.output.shippingFirstName,
          addressLevel1: '',
          phone: parsed.output.shippingPhone,
          postalCode: parsed.output.shippingPostalCode,
          stressAddress: parsed.output.shippingStreetAddress,
          addressLevel4: parsed.output.shippingAddressLevel4,
          addressLevel3: parsed.output.shippingAddressLevel3,
          addressLevel2: parsed.output.shippingAddressLevel2,
        },
      })

      return Astro.redirect(`/orders/${orderId}`)
    }
  }
}
---

<Layout title={product.name}>
  <form class='gap-8 diagonal-fractions lg:grid lg:grid-cols-12' method='POST'>
    <Breadcrumb
      className='col-span-full col-start-2 mb-8 lg:mb-0 2xl:col-start-1'
    >
      <BreadcrumbItem link='/'>Home</BreadcrumbItem>
      <BreadcrumbItem link={`/products/${product.id}`}>
        {product.name}
      </BreadcrumbItem>
      <BreadcrumbItemCurrent>Order</BreadcrumbItemCurrent>
    </Breadcrumb>

    <div
      class='col-span-5 col-start-2 row-span-2 2xl:col-span-7 2xl:col-start-1'
    >
      <PersonalInformation errors={errors} />
    </div>
    <div class='col-span-5 row-span-2 space-y-6'>
      <div class='text-lg font-medium leading-7'>Order summary</div>
      <OrderSummary
        client:visible
        id={product.id}
        image={product.image}
        maxQuantity={product.quantity}
        name={product.name}
        price={product.price.toString()}
      />
    </div>
  </form>
</Layout>
